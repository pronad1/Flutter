rules_version = '2';

// ===========================================================================
// FIRESTORE SECURITY RULES - Flutter Donation App
// ===========================================================================
//
// Collections:
// - users/{userId}         : Private full user profile (owner/admin only)
// - publicProfiles/{userId}: Public minimal profile (name, bio, photo, email)
// - items/{itemId}         : Donation items (public read, owner/admin write)
// - requests/{requestId}   : Donor-Seeker requests (parties + admin only)
// - reviews/{reviewId}     : Donor reviews (public read, auth write with validation)
// - chats/{chatId}         : Private chats (members + admin only)
//   └─ messages/{msgId}    : Chat messages (members + admin only)
//
// Last Updated: October 26, 2025
// Auto-create feature enabled for publicProfiles
// ===========================================================================

service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================================================
    // HELPER FUNCTIONS
    // ========================================================================

    /// Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    /// Check if the authenticated user is the specified userId
    function isSelf(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /// Check if user has admin role in their users/{uid} document
    function isAdmin() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // ========================================================================
    // COLLECTION: publicProfiles (PUBLIC MINIMAL PROFILES)
    // ========================================================================
    // Purpose: Store minimal public-facing profile data for donor/seeker profile views
    // Fields: name, bio, photoUrl, email (optional), createdAt, updatedAt
    // 
    // Created by: 
    //   - auth_service.dart (during signup for new users)
    //   - edit_profile_screen.dart (when user updates profile)
    //   - public_profile_screen.dart (auto-create for legacy users on first view)
    // 
    // Read by: public_profile_screen.dart (anyone can view)
    // 
    // Security:
    //   ✅ Read: Public (anyone can view profiles)
    //   ✅ Create: Any authenticated user (enables auto-creation for legacy users)
    //   ✅ Update: Only profile owner (prevents profile hijacking)
    //   ✅ Delete: Blocked (profiles are permanent)
    //
    match /publicProfiles/{userId} {
      allow read: if true; // Public read for viewing donor/seeker profiles

      // Allow ANY authenticated user to create publicProfiles
      // This enables the auto-creation feature for legacy users who signed up
      // before publicProfiles existed. When viewing a profile that doesn't exist,
      // the app automatically creates it from the items collection data.
      allow create: if isSignedIn();

      // Only the profile owner can update their own public profile
      // This prevents other users from modifying someone else's profile
      allow update: if isSelf(userId);

      // Prevent deletion to keep profiles persistent
      allow delete: if false;
    }

    // ========================================================================
    // COLLECTION: users (PRIVATE FULL PROFILES)
    // ========================================================================
    // Purpose: Store complete user data (email, role, mobile, approved status, etc.)
    // Fields: email, role, name, mobile, approved, createdAt, bio, photoUrl, isAdmin, etc.
    // 
    // Created by: auth_service.dart (during signup)
    // Updated by: edit_profile_screen.dart, admin_approval_screen.dart
    // 
    // Security:
    //   ✅ Create: User can create their own document during signup
    //   ✅ Read/Update: Only owner or admin
    //   ✅ Delete: Only admin
    //
    match /users/{userId} {
      // Users can create their own profile during signup
      allow create: if isSelf(userId);

      // Only owner or admin can read the full private profile
      allow read, update: if isSelf(userId) || isAdmin();

      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }

    // ========================================================================
    // COLLECTION: items (DONATION ITEMS)
    // ========================================================================
    // Purpose: Store donation items posted by donors
    // Fields: ownerId, title, description, imageUrl, available, ownerName, createdAt, etc.
    // 
    // Created by: item_service.dart createItem()
    // Updated by: item_service.dart updateItem(), setRequestStatus()
    // 
    // Security:
    //   ✅ Read: Public (anyone can browse items in home feed)
    //   ✅ Create: Authenticated users (must set ownerId to their own uid)
    //   ✅ Update: Only owner or admin (ownerId cannot be changed)
    //   ✅ Delete: Only owner or admin
    //
    match /items/{itemId} {
      // Anyone can read items (needed for home feed)
      allow read: if true;

      // Users can create items, but only for themselves
      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid;

      // Owner or admin can update items
      // Prevent changing ownerId after creation (security critical)
      allow update: if (
        isSignedIn() &&
        resource.data.ownerId == request.auth.uid &&
        request.resource.data.ownerId == resource.data.ownerId
      ) || isAdmin();

      // Owner or admin can delete items
      allow delete: if (
        isSignedIn() && resource.data.ownerId == request.auth.uid
      ) || isAdmin();
    }

    // ========================================================================
    // COLLECTION: requests (SEEKER → DONOR REQUESTS)
    // ========================================================================
    // Purpose: Track donation requests from seekers to donors
    // Fields: itemId, ownerId, seekerId, status (pending/approved/rejected), createdAt, updatedAt
    // 
    // Created by: item_service.dart createRequest()
    // Updated by: item_service.dart setRequestStatus()
    // 
    // Security:
    //   ✅ Read: Only the two parties (owner/seeker) or admin
    //   ✅ Create: Only seeker (must set seekerId to their own uid)
    //   ✅ Update: Only donor (owner) or admin (status updates only)
    //   ✅ Delete: Only donor (owner) or admin
    //
    match /requests/{requestId} {
      // Only the donor (ownerId) or seeker (seekerId) or admin can read
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.seekerId == request.auth.uid ||
        isAdmin()
      );

      // Only the seeker can create a request, and only for themselves
      allow create: if isSignedIn()
        && request.resource.data.seekerId == request.auth.uid;

      // Only the donor (ownerId) or admin can update the request status
      // Prevent changing identities (ownerId, seekerId, itemId) - security critical
      // Limit writable fields to prevent data tampering
      allow update: if (
        isSignedIn() &&
        resource.data.ownerId == request.auth.uid &&
        request.resource.data.ownerId == resource.data.ownerId &&
        request.resource.data.seekerId == resource.data.seekerId &&
        request.resource.data.itemId == resource.data.itemId &&
        request.resource.data.keys().hasOnly(
          ['itemId', 'ownerId', 'seekerId', 'status', 'createdAt', 'updatedAt']
        )
      ) || isAdmin();

      // Donor (owner) or admin can delete requests
      allow delete: if (
        isSignedIn() && resource.data.ownerId == request.auth.uid
      ) || isAdmin();
    }

    // ========================================================================
    // COLLECTION: reviews (DONOR REVIEWS)
    // ========================================================================
    // Purpose: Store reviews for donors (visible on public profile)
    // Fields: donorId, reviewerId, reviewerName, rating (1-5), text, createdAt
    // 
    // Created by: review_service.dart submitReview()
    // Read by: public_profile_screen.dart (anyone can view)
    // 
    // Security:
    //   ✅ Read: Public (anyone can view reviews on profiles)
    //   ✅ Create: Authenticated users with strict validation:
    //      - reviewerId must match auth.uid (prevent impersonation)
    //      - donorId must be valid string
    //      - rating must be integer 1-5
    //      - reviewerName must be provided
    //      - text is optional
    //   ✅ Update/Delete: Blocked (reviews are immutable)
    //
    match /reviews/{reviewId} {
      // Anyone can read reviews (needed for public profile)
      allow read: if true;

      // Authenticated users can create reviews with strict validation
      allow create: if isSignedIn()
        && request.resource.data.reviewerId == request.auth.uid
        && request.resource.data.donorId is string
        && request.resource.data.rating is int
        && request.resource.data.rating >= 1
        && request.resource.data.rating <= 5
        && request.resource.data.reviewerName is string
        && (request.resource.data.text is string || request.resource.data.text == null);

      // Reviews are immutable (no updates or deletes to prevent abuse)
      allow update, delete: if false;
    }

    // ========================================================================
    // COLLECTION: chats (PRIVATE MESSAGING)
    // ========================================================================
    // Purpose: Store chat rooms between users
    // Fields: members (array of user IDs), lastMessage, lastMessageTime, etc.
    // 
    // Security:
    //   ✅ Read/Write: Only chat members or admin
    //
    match /chats/{chatId} {
      // Chat members or admin can read/write the chat document
      allow read, write: if isAdmin() ||
        (isSignedIn() && (
          (request.resource.data.members != null && request.auth.uid in request.resource.data.members) ||
          (resource.data.members != null && request.auth.uid in resource.data.members)
        ));

      // ======================================================================
      // SUBCOLLECTION: chats/{chatId}/messages (CHAT MESSAGES)
      // ======================================================================
      // Purpose: Store individual messages within a chat
      // Fields: senderId, text, timestamp, etc.
      // 
      // Security:
      //   ✅ Read/Write: Only chat members or admin
      //
      match /messages/{messageId} {
        // Only chat members or admin can read/write messages
        allow read, write: if isAdmin() ||
          (isSignedIn() &&
           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members);
      }
    }

    // ========================================================================
    // DEFAULT DENY ALL
    // ========================================================================
    // Deny access to any other collections/documents not explicitly allowed above
    // This is a security best practice to prevent accidental data exposure
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

